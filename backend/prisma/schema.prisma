generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String             @id @default(cuid())
  email              String             @unique
  phone              String?
  password           String
  firstName          String
  lastName           String
  userType           UserType
  profileImage       String?
  verificationStatus VerificationStatus @default(PENDING)
  emailVerified      Boolean            @default(false)
  phoneVerified      Boolean            @default(false)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  isActive           Boolean            @default(true)
  lastLoginAt        DateTime?

  // Additional Profile Fields
  dateOfBirth           DateTime?
  ssn                   String? // Encrypted
  creditScore           Int?
  annualIncome          Int?
  employmentStatus      String?
  companyName           String?
  workPhone             String?
  emergencyContact      Json?
  backgroundCheckStatus String    @default("PENDING")

  // Stripe Connect Fields for Landlords
  stripeAccountId          String? // Stripe Connect account ID
  stripeAccountStatus      String  @default("PENDING") // PENDING, VERIFIED, RESTRICTED, SUSPENDED
  stripeOnboardingComplete Boolean @default(false)
  stripeChargesEnabled     Boolean @default(false)
  stripePayoutsEnabled     Boolean @default(false)
  bankAccountLast4         String? // Last 4 digits of bank account
  defaultPaymentMethod     String? // For renters making payments

  // Relationships
  properties          Property[]
  applications        Application[]
  leases              Lease[]
  landlordLeases      Lease[]              @relation("LandlordLeases")
  sentMessages        Message[]            @relation("SentMessages")
  receivedMessages    Message[]            @relation("ReceivedMessages")
  payments            Payment[]            @relation("PayerPayments")
  receivedPayments    Payment[]            @relation("ReceiverPayments")
  reviews             Review[]
  savedProperties     SavedProperty[]
  emailVerifications  EmailVerification[]
  passwordResets      PasswordReset[]
  maintenanceRequests MaintenanceRequest[] @relation("TenantRequests")
  vendors             Vendor[]             @relation("LandlordVendors")
  vendorReviews       VendorReview[]

  @@map("users")
}

model EmailVerification {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verifications")
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

model EmailLog {
  id       String      @id @default(cuid())
  to       String
  subject  String
  template String
  status   EmailStatus
  error    String?
  sentAt   DateTime    @default(now())

  @@map("email_logs")
}

model Property {
  id                String         @id @default(cuid())
  title             String
  description       String
  address           String
  city              String         @default("New York")
  borough           Borough
  zipCode           String
  latitude          Float?
  longitude         Float?
  propertyType      PropertyType
  bedrooms          Int
  bathrooms         Float
  squareFeet        Int?
  rentAmount        Int
  securityDeposit   Int
  brokerFee         Int            @default(0)
  availableDate     DateTime
  status            PropertyStatus @default(AVAILABLE)
  isRentStabilized  Boolean        @default(false)
  isBrokerFee       Boolean        @default(false)
  amenities         String[]
  photos            String[]
  virtualTourUrl    String?
  petPolicy         String?
  smokingPolicy     String?
  leaseTerm         String?
  utilitiesIncluded String[]
  parkingAvailable  Boolean        @default(false)
  furnished         Boolean        @default(false)

  // FARE Act Compliance Fields
  landlordBrokerFee Int     @default(0)
  tenantFees        Json? // Itemized tenant fees
  feeDisclosure     String? // FARE Act disclosure text
  brokerLicense     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign Keys
  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id])

  // Relationships
  applications        Application[]
  messages            Message[]
  savedBy             SavedProperty[]
  maintenanceRequests MaintenanceRequest[]
  leases              Lease[]
  inspections         PropertyInspection[]
  fareActCompliance   FareActCompliance?

  @@map("properties")
}

model Application {
  id             String            @id @default(cuid())
  status         ApplicationStatus @default(PENDING)
  moveInDate     DateTime
  employmentInfo Json
  references     Json
  documents      String[]
  creditScore    Int?
  monthlyIncome  Int?
  notes          String?
  landlordNotes  String?

  // Additional Application Fields
  previousAddress  String?
  reasonForMoving  String?
  pets             Json?
  vehicles         Json?
  emergencyContact Json?

  // Background Check Results
  backgroundCheckId      String?
  backgroundCheckStatus  String  @default("PENDING")
  backgroundCheckResults Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign Keys
  applicantId String
  propertyId  String
  applicant   User     @relation(fields: [applicantId], references: [id])
  property    Property @relation(fields: [propertyId], references: [id])

  // Relationships
  payments Payment[]
  lease    Lease?

  @@unique([applicantId, propertyId])
  @@map("applications")
}

model Lease {
  id              String      @id @default(cuid())
  startDate       DateTime
  endDate         DateTime
  monthlyRent     Int
  securityDeposit Int
  terms           Json
  status          LeaseStatus @default(DRAFT)
  signedAt        DateTime?
  documentUrl     String?

  // Foreign Keys
  applicationId String @unique
  tenantId      String
  landlordId    String
  propertyId    String

  application Application @relation(fields: [applicationId], references: [id])
  tenant      User        @relation(fields: [tenantId], references: [id])
  landlord    User        @relation("LandlordLeases", fields: [landlordId], references: [id])
  property    Property    @relation(fields: [propertyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("leases")
}

model Message {
  id          String      @id @default(cuid())
  content     String
  messageType MessageType @default(TEXT)
  attachments String[]
  isRead      Boolean     @default(false)
  isSystem    Boolean     @default(false)
  createdAt   DateTime    @default(now())

  // Foreign Keys
  senderId   String
  receiverId String
  propertyId String?

  sender   User      @relation("SentMessages", fields: [senderId], references: [id])
  receiver User      @relation("ReceivedMessages", fields: [receiverId], references: [id])
  property Property? @relation(fields: [propertyId], references: [id])

  @@map("messages")
}

model Payment {
  id               String        @id @default(cuid())
  amount           Int
  type             PaymentType
  status           PaymentStatus @default(PENDING)
  stripePaymentId  String?
  stripeTransferId String? // For Stripe Connect transfers
  description      String?
  dueDate          DateTime?
  paidDate         DateTime?
  refundedDate     DateTime?
  refundAmount     Int?
  transferredDate  DateTime? // When funds transferred to landlord
  platformFee      Int? // Platform fee (2.9% of amount)
  stripeFee        Int? // Stripe processing fee
  landlordAmount   Int? // Amount after fees transferred to landlord
  createdAt        DateTime      @default(now())

  // Foreign Keys
  payerId       String
  receiverId    String? // Landlord receiving the payment via Stripe Connect
  applicationId String?

  payer       User         @relation("PayerPayments", fields: [payerId], references: [id])
  receiver    User?        @relation("ReceiverPayments", fields: [receiverId], references: [id])
  application Application? @relation(fields: [applicationId], references: [id])

  @@map("payments")
}

model Review {
  id         String     @id @default(cuid())
  rating     Int        @map("rating")
  comment    String?
  reviewType ReviewType
  response   String?
  createdAt  DateTime   @default(now())

  // Foreign Keys
  reviewerId String
  revieweeId String
  propertyId String?

  reviewer User @relation(fields: [reviewerId], references: [id])

  @@map("reviews")
}

model SavedProperty {
  id        String   @id @default(cuid())
  notes     String?
  createdAt DateTime @default(now())

  // Foreign Keys
  userId     String
  propertyId String

  user     User     @relation(fields: [userId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])

  @@unique([userId, propertyId])
  @@map("saved_properties")
}

model MaintenanceRequest {
  id            String            @id @default(cuid())
  title         String
  description   String
  priority      Priority          @default(MEDIUM)
  status        MaintenanceStatus @default(PENDING)
  photos        String[]
  cost          Int?
  scheduledDate DateTime?
  completedAt   DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Vendor Assignment Fields
  assignedVendorId String?
  vendorNotes      String?
  vendorEstimate   Int?
  workStartDate    DateTime?
  workEndDate      DateTime?

  // Foreign Keys
  propertyId String
  tenantId   String

  property       Property @relation(fields: [propertyId], references: [id])
  tenant         User     @relation("TenantRequests", fields: [tenantId], references: [id])
  assignedVendor Vendor?  @relation(fields: [assignedVendorId], references: [id])

  @@map("maintenance_requests")
}

model Vendor {
  id            String   @id @default(cuid())
  companyName   String
  contactPerson String
  email         String
  phone         String
  address       String?
  website       String?
  description   String?
  specialties   String[] // Array of service types they handle
  serviceAreas  String[] // NYC boroughs they serve
  isVerified    Boolean  @default(false)
  isActive      Boolean  @default(true)
  rating        Float? // Average rating from reviews
  totalReviews  Int      @default(0)

  // Business Information
  businessLicense String?
  insurance       Json? // Insurance information
  certifications  String[] // Professional certifications

  // Pricing Information
  hourlyRate    Int? // Hourly rate in cents
  emergencyRate Int? // Emergency/after-hours rate in cents
  minimumCharge Int? // Minimum charge in cents

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign Keys
  addedById String // Landlord who added this vendor
  addedBy   User   @relation("LandlordVendors", fields: [addedById], references: [id])

  // Relationships
  services            VendorService[]
  maintenanceRequests MaintenanceRequest[]
  reviews             VendorReview[]

  @@map("vendors")
}

model VendorService {
  id          String      @id @default(cuid())
  serviceType ServiceType
  description String?
  basePrice   Int? // Base price in cents
  priceType   PriceType   @default(HOURLY) // HOURLY, FLAT_RATE, PER_SQFT, ESTIMATE_REQUIRED
  isEmergency Boolean     @default(false)

  // Foreign Keys
  vendorId String
  vendor   Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([vendorId, serviceType])
  @@map("vendor_services")
}

model VendorReview {
  id            String  @id @default(cuid())
  rating        Int // 1-5 stars
  comment       String?
  workQuality   Int // 1-5 rating for work quality
  timeliness    Int // 1-5 rating for timeliness
  communication Int // 1-5 rating for communication
  value         Int // 1-5 rating for value/pricing

  // Work Details
  workType String?
  workDate DateTime?
  cost     Int? // Total cost of work in cents

  // Response from vendor
  vendorResponse     String?
  vendorResponseDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign Keys
  vendorId             String
  reviewerId           String // Landlord who left the review
  maintenanceRequestId String? // Optional link to specific maintenance request

  vendor   Vendor @relation(fields: [vendorId], references: [id])
  reviewer User   @relation(fields: [reviewerId], references: [id])

  @@map("vendor_reviews")
}

model PropertyInspection {
  id            String           @id @default(cuid())
  type          InspectionType
  scheduledDate DateTime
  completedDate DateTime?
  status        InspectionStatus @default(SCHEDULED)
  notes         String?
  photos        String[]
  report        Json?

  // Foreign Keys
  propertyId  String
  inspectorId String?

  property Property @relation(fields: [propertyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("property_inspections")
}

model FareActCompliance {
  id                 String   @id @default(cuid())
  propertyId         String   @unique
  disclosureProvided Boolean  @default(false)
  feesDisclosed      Json
  brokerRelationship String
  complianceDate     DateTime @default(now())
  violations         Json?

  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("fare_act_compliance")
}

model BackgroundCheck {
  id          String                @id @default(cuid())
  userId      String
  provider    String // "checkr", "experian", etc.
  externalId  String? // Provider's ID
  status      BackgroundCheckStatus @default(PENDING)
  results     Json?
  reportUrl   String?
  requestedAt DateTime              @default(now())
  completedAt DateTime?

  @@map("background_checks")
}

model ActivityLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  entity    String
  entityId  String?
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("activity_logs")
}

model SystemSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}

// Enums
enum UserType {
  RENTER
  LANDLORD
  PROPERTY_MANAGER
  ADMIN
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum EmailStatus {
  SENT
  FAILED
  BOUNCED
}

enum Borough {
  MANHATTAN
  BROOKLYN
  QUEENS
  BRONX
  STATEN_ISLAND
}

enum PropertyType {
  APARTMENT
  HOUSE
  CONDO
  STUDIO
  TOWNHOUSE
  LOFT
}

enum PropertyStatus {
  AVAILABLE
  PENDING
  RENTED
  INACTIVE
  MAINTENANCE
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
  WITHDRAWN
}

enum LeaseStatus {
  DRAFT
  PENDING_SIGNATURE
  ACTIVE
  EXPIRED
  TERMINATED
}

enum MessageType {
  TEXT
  IMAGE
  DOCUMENT
  SYSTEM
}

enum PaymentType {
  APPLICATION_FEE
  SECURITY_DEPOSIT
  FIRST_MONTH_RENT
  MONTHLY_RENT
  LATE_FEE
  BROKER_FEE
  BACKGROUND_CHECK_FEE
  DEPOSIT_TRANSFER
  RENT_TRANSFER
  OTHER
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  DISPUTED
  TRANSFERRED
}

enum ReviewType {
  TENANT_TO_LANDLORD
  LANDLORD_TO_TENANT
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MaintenanceStatus {
  PENDING
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum InspectionType {
  MOVE_IN
  MOVE_OUT
  ANNUAL
  MAINTENANCE
  COMPLIANCE
}

enum InspectionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum BackgroundCheckStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum ServiceType {
  PLUMBING
  ELECTRICAL
  HVAC
  CARPENTRY
  PAINTING
  FLOORING
  APPLIANCE_REPAIR
  PEST_CONTROL
  CLEANING
  LANDSCAPING
  ROOFING
  WINDOWS
  GENERAL_HANDYMAN
  LOCKSMITH
  MASONRY
  DRYWALL
  TILE_WORK
  EMERGENCY_REPAIR
  OTHER
}

enum PriceType {
  HOURLY
  FLAT_RATE
  PER_SQFT
  ESTIMATE_REQUIRED
}
